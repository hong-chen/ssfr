#!/usr/bin/env python

"""
Command line tool to convert SSFR SKS files to MP4 quicklook video

Input: 1) input directory that contains .SKS file
       2) output directory to store .mp4 file

Example:
    sks2mp4 /path/to/SKS/files /path/to/store/mp4/video

by:
    Hong Chen
"""

import os
import sys
import glob
from collections import OrderedDict
import datetime
import subprocess
import multiprocessing as mp
from multiprocessing.shared_memory import SharedMemory
from multiprocessing.managers import SharedMemoryManager
from tqdm import tqdm
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import rcParams, ticker
import matplotlib.patches as mpatches
import matplotlib.gridspec as gridspec
from matplotlib.ticker import FixedLocator
import matplotlib.style as mplstyle

mpl.use('Agg')
mplstyle.use('fast')


import ssfr


_DEFAULT_SSFR_   = 'ssfr-b'
_FILE_EXTENSION_ = 'SKS'
_FDIR_OUT_       = './'
_FDIR_CAL_       = '%s/cal' % ssfr.common.fdir_data
_LAMP_PRI_       = 'lamp-1324'
_LAMP_SEC_       = 'lamp-150c'
_TIME_STEP_      = 1
_WVL_STEP_       = 1
_TIME_INTERVAL_  = 9
_FDIR_TMP_       = './tmp-data'
_DELETE_TMP_     = True
_DELETE_ASK_     = False
_FLUX_RANGE_     = [0.0, 2.0]
_NCPU_ = max(1, mp.cpu_count()-2)



def plot_video_frame(statements, test=False):

    # extract arguments
    #╭────────────────────────────────────────────────────────────────────────────╮#
    shared_data, unshared_data, index_pnt = statements

    _DATA_PLT_ = {}
    shm_tmp = {}
    for key in shared_data.keys():
        shm_tmp[key] = SharedMemory(name=shared_data[key]['shm_name'])
        _DATA_PLT_[key] = np.ndarray(shared_data[key]['shape'], dtype=shared_data[key]['dtype'], buffer=shm_tmp[key].buf)
    for key in unshared_data.keys():
        _DATA_PLT_[key] = unshared_data[key]

    vnames_plt = _DATA_PLT_.keys()
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # general plot settings
    #╭────────────────────────────────────────────────────────────────────────────╮#
    vars_plot = OrderedDict()

    vars_plot['zen|si|raw']   = {
            'vname':'zen_si_cnt_raw',
            'color':'dodgerblue',
            'vname_wvl':'zen_si_wvl',
            'zorder': 5,
            }
    vars_plot['zen|in|raw']   = {
            'vname':'zen_in_cnt_raw',
            'color':'springgreen',
            'vname_wvl':'zen_in_wvl',
            'zorder': 6,
            }
    vars_plot['nad|si|raw']   = {
            'vname':'nad_si_cnt_raw',
            'color':'deeppink',
            'vname_wvl':'nad_si_wvl',
            'zorder': 4,
            }
    vars_plot['nad|in|raw']   = {
            'vname':'nad_in_cnt_raw',
            'color':'darkorange',
            'vname_wvl':'nad_in_wvl',
            'zorder': 3,
            }
    vars_plot['zen|si|dc']   = {
            'vname':'zen_si_cnt_dc',
            'color':'dodgerblue',
            'vname_wvl':'zen_si_wvl',
            'zorder': 5,
            }
    vars_plot['zen|in|dc']   = {
            'vname':'zen_in_cnt_dc',
            'color':'springgreen',
            'vname_wvl':'zen_in_wvl',
            'zorder': 6,
            }
    vars_plot['nad|si|dc']   = {
            'vname':'nad_si_cnt_dc',
            'color':'deeppink',
            'vname_wvl':'nad_si_wvl',
            'zorder': 4,
            }
    vars_plot['nad|in|dc']   = {
            'vname':'nad_in_cnt_dc',
            'color':'darkorange',
            'vname_wvl':'nad_in_wvl',
            'zorder': 3,
            }
    vars_plot['zen|spec']   = {
            'vname':'zen_spec',
            'color':'blue',
            'vname_wvl':'zen_wvl',
            'zorder': 5,
            }
    vars_plot['nad|spec']   = {
            'vname':'nad_spec',
            'color':'red',
            'vname_wvl':'nad_wvl',
            'zorder': 4,
            }
    vars_plot['shutter']   = {
            'vname':'shutter',
            'color':'dimgray',
            'zorder': 1,
            }
    vars_plot['shutter_dc']   = {
            'vname':'shutter_dc',
            'color':'purple',
            'zorder': 0,
            }

    for vname in vars_plot.keys():

        vname_ori = vars_plot[vname]['vname']
        if vname_ori in vnames_plt:
            vars_plot[vname]['plot?'] = True
        else:
            vars_plot[vname]['plot?'] = False

        if 'vname_wvl' in vars_plot[vname].keys():
            vars_plot[vname]['spectra?'] = True
        else:
            vars_plot[vname]['spectra?'] = False
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # params
    #╭────────────────────────────────────────────────────────────────────────────╮#
    count_base = -2**15
    count_ceil = 2**15
    dynamic_range = count_ceil-count_base
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # param settings
    #╭────────────────────────────────────────────────────────────────────────────╮#
    tmhr_current = _DATA_PLT_['tmhr'][index_pnt]
    jday_current = _DATA_PLT_['jday'][index_pnt]
    dtime_current = ssfr.util.jday_to_dtime(jday_current)

    int_time_zen_si_current, int_time_zen_in_current, int_time_nad_si_current, int_time_nad_in_current = _DATA_PLT_['int_time'][index_pnt, :]

    tmhr_length  = 0.05 # 3 minutes or 180 seconds
    tmhr_past    = tmhr_current-tmhr_length
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # figure setup
    #╭────────────────────────────────────────────────────────────────────────────╮#
    rcParams['font.size'] = 12
    fig = plt.figure(figsize=(12, 12))

    gs = gridspec.GridSpec(17, 17)

    # ax of all
    ax = fig.add_subplot(gs[:, :])

    ax_zen_si = fig.add_subplot(gs[:5, :8])
    ax_zen_in = fig.add_subplot(gs[:5, 9:])
    ax_nad_si = fig.add_subplot(gs[5:10, :8])
    ax_nad_in = fig.add_subplot(gs[5:10, 9:])
    ax_zen_si0 = ax_zen_si.twinx()
    ax_zen_in0 = ax_zen_in.twinx()
    ax_nad_si0 = ax_nad_si.twinx()
    ax_nad_in0 = ax_nad_in.twinx()

    # spetral irradiance
    ax_wvl  = fig.add_subplot(gs[10:14, :])
    ax_wvl0 = ax_wvl.twinx()

    ax_temp0_= ax_wvl.twinx()
    ax_temp0 = ax_temp0_.twiny()

    # time series
    ax_tms  = fig.add_subplot(gs[14:, :])

    fig.subplots_adjust(hspace=100.0, wspace=5.0)
    #╰────────────────────────────────────────────────────────────────────────────╯#


    axes_spec = {
            'zen|si': ax_zen_si,
            'zen|in': ax_zen_in,
            'nad|si': ax_nad_si,
            'nad|in': ax_nad_in,
            }
    axes_spec0 = {
            'zen|si': ax_zen_si0,
            'zen|in': ax_zen_in0,
            'nad|si': ax_nad_si0,
            'nad|in': ax_nad_in0,
            }

    spec_info = {
            'zen|si': {'full_name': 'Zenith Silicon', 'int_time': int_time_zen_si_current},
            'zen|in': {'full_name': 'Zenith InGaAs' , 'int_time': int_time_zen_in_current},
            'nad|si': {'full_name': 'Nadir Silicon' , 'int_time': int_time_nad_si_current},
            'nad|in': {'full_name': 'Nadir InGaAs'  , 'int_time': int_time_nad_in_current},
            }

    Nchan = {
            'zen|si': 75,
            'zen|in': 202,
            }
    Nchan['nad|si'] = np.argmin(np.abs(_DATA_PLT_['zen_si_wvl'][Nchan['zen|si']]-_DATA_PLT_['nad_si_wvl']))
    Nchan['nad|in'] = np.argmin(np.abs(_DATA_PLT_['zen_in_wvl'][Nchan['zen|in']]-_DATA_PLT_['nad_in_wvl']))

    for key in axes_spec.keys():
        ax_spec  = axes_spec[key]
        ax_spec0 = axes_spec0[key]
        var_plot_raw = vars_plot['%s|raw' % key]
        var_plot_dc  = vars_plot['%s|dc' % key]

        ax_spec.plot(_DATA_PLT_[var_plot_raw['vname']][index_pnt, :],
                color='k', marker='o', markersize=1.5, lw=0.5, markeredgewidth=0.0, alpha=1.0, zorder=10)
        ax_spec.plot(_DATA_PLT_[var_plot_raw['vname']][index_pnt, :]-_DATA_PLT_[var_plot_dc['vname']][index_pnt, :],
                color='r', marker='o', markersize=1.5, lw=0.5, markeredgewidth=0.0, alpha=0.6, zorder=8)
        ax_spec0.plot(_DATA_PLT_[var_plot_dc['vname']][index_pnt, :],
                color='g', marker='o', markersize=1.5, lw=0.5, markeredgewidth=0.0, alpha=0.6, zorder=9)

        ax_spec.axhspan(count_base, count_ceil  , color='black', alpha=0.08, zorder=1)

        ax_spec.grid(lw=0.5)
        ax_spec.set_xlim((0, 255))
        ax_spec.set_ylim((count_base-2000, count_ceil+2000))

        ax_spec.xaxis.set_major_locator(FixedLocator(np.arange(0, 300, 50)))
        ax_spec.xaxis.set_minor_locator(FixedLocator(np.arange(0, 300, 10)))
        ax_spec.yaxis.set_major_locator(FixedLocator(np.arange(-40000, 80001, 10000)))
        ax_spec.yaxis.set_minor_locator(FixedLocator(np.arange(-40000, 80001, 5000)))
        ax_spec.ticklabel_format(axis='y', style='sci', scilimits=(0, 4), useMathText=True)

        if key in ['zen|si', 'nad|si']:
            ax_spec.set_ylabel('Digital Counts')
            ax_spec.axvline(Nchan[key], color=var_plot_dc['color'], ls='--', lw=1.0)

        if key in ['nad|si', 'nad|in']:
            ax_spec.set_xlabel('Channel Number')

        ax_spec.set_title('%s (%3d ms)' % (spec_info[key]['full_name'], spec_info[key]['int_time']), color=var_plot_dc['color'])

        ax_spec0.set_ylim((-2000, dynamic_range+2000))
        ax_spec0.yaxis.set_major_locator(FixedLocator(np.arange(-40000, 80001, 20000)))
        ax_spec0.yaxis.set_minor_locator(FixedLocator(np.arange(-40000, 80001,  5000)))
        ax_spec0.ticklabel_format(axis='y', style='sci', scilimits=(0, 4), useMathText=True, useOffset=True)

        ax_spec0.set_frame_on(True)
        for spine in ax_spec0.spines.values():
            spine.set_visible(False)
        ax_spec0.spines['right'].set_visible(True)
        ax_spec0.spines['right'].set_color('green')
        ax_spec0.tick_params(axis='y', colors='green')

        if key in ['zen|in', 'nad|in']:
            ax_spec0.set_ylabel('Digital Counts', color='green', rotation=270, labelpad=18)
            ax_spec.axvline(Nchan[key], color=var_plot_dc['color'], ls='--', lw=1.0)

    patches_legend = [
                      mpatches.Patch(color='black' , label='Raw Counts'), \
                      mpatches.Patch(color='red'   , label='Dark Counts'), \
                      mpatches.Patch(color='green' , label='Dark Corrected Counts'), \
                     ]
    ax.legend(handles=patches_legend, bbox_to_anchor=(0.1, 1.03, 0.8, .102), loc=3, ncol=len(patches_legend), mode="expand", borderaxespad=0., frameon=False, handletextpad=0.2, fontsize=16)


    # spectra plot setting
    #╭────────────────────────────────────────────────────────────────────────────╮#
    for key in ['zen', 'nad']:
        var_plot = vars_plot['%s|spec' % key]
        if var_plot['plot?']:
            ax_wvl.plot(_DATA_PLT_[var_plot['vname_wvl']], _DATA_PLT_[var_plot['vname']][index_pnt, :],
                    color=var_plot['color'], marker='o', markersize=1.5, lw=0.5, markeredgewidth=0.0, alpha=1.0, zorder=10)
        for key0 in ['si', 'in']:
            var_plot0 = vars_plot['%s|%s|dc' % (key, key0)]
            ax_wvl0.fill_between(_DATA_PLT_[var_plot0['vname_wvl']], 0.0, _DATA_PLT_[var_plot0['vname']][index_pnt, :],
                    color=var_plot0['color'], lw=0.0,  alpha=0.3, zorder=5)
            ax_wvl0.axvline(_DATA_PLT_[var_plot0['vname_wvl']][Nchan['%s|%s' % (key, key0)]], color=var_plot0['color'], ls='--', lw=1.0)

    ax_wvl.axvline(950.0, color='black', lw=1.0, alpha=1.0, zorder=1, ls=':')
    ax_wvl.axhline(0.0  , color='black', lw=1.0, alpha=1.0, zorder=1)
    ax_wvl.set_xlim((200, 2400))
    ax_wvl.xaxis.set_major_locator(FixedLocator(np.arange(200, 2401, 200)))
    ax_wvl.xaxis.set_minor_locator(FixedLocator(np.arange(0, 2401, 100)))
    ax_wvl.set_xlabel('Wavelength [nm]')


    if vars_plot['zen|spec']['plot?'] and vars_plot['nad|spec']['plot?']:
        patches_legend = [
                          mpatches.Patch(color='blue', label='Zenith'), \
                          mpatches.Patch(color='red' , label='Nadir'), \
                         ]
        ax_wvl.legend(handles=patches_legend, loc='lower right', fontsize=12)

        ax_wvl.yaxis.set_major_locator(FixedLocator(np.arange(0.0, 10.1, 0.5)))
        ax_wvl.yaxis.set_minor_locator(FixedLocator(np.arange(0.0, 10.1, 0.1)))
        if _DATA_PLT_['is_flux']:
            ax_wvl.set_ylabel('Flux [$\\mathrm{W m^{-2} nm^{-1}}$]')
        else:
            ax_wvl.set_ylabel('Scaled Radiation')
        ax_wvl.set_ylim(_FLUX_RANGE_)

    else:
        ax_wvl.set_ylabel('N/A')
        ax_wvl.get_yaxis().set_ticks([])

    ax_wvl0.set_ylim((0, count_ceil*2.0))
    ax_wvl0.yaxis.set_major_locator(FixedLocator(np.arange(-40000, 80001, 20000)))
    ax_wvl0.yaxis.set_minor_locator(FixedLocator(np.arange(-40000, 80001,  5000)))
    ax_wvl0.ticklabel_format(axis='y', style='sci', scilimits=(0, 4), useMathText=True, useOffset=True)
    ax_wvl0.set_ylabel('Digital Counts', labelpad=18, rotation=270)
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # temperature plot
    #╭────────────────────────────────────────────────────────────────────────────╮#
    temperatures = {
            0: {'name': 'Ambient T' , 'units':'$^\\circ C$'},
            1: {'name': 'Zen In T'  , 'units':'$^\\circ C$'},
            2: {'name': 'Nad In T'  , 'units':'$^\\circ C$'},
            3: {'name': 'Plate T'   , 'units':'$^\\circ C$'},
            4: {'name': 'RH'        , 'units':'%'},
            5: {'name': 'Zen In TEC1', 'units':'$^\\circ C$'},
            6: {'name': 'Nad In TEC2', 'units':'$^\\circ C$'},
            7: {'name': 'Wvl Con T' , 'units':'$^\\circ C$'},
            8: {'name': 'N/A'       , 'units':''},
            9: {'name': 'cRIO T'    , 'units':'$^\\circ C$'},
           10: {'name': 'N/A'       , 'units':''},
            }
    temp = _DATA_PLT_['temperature'][index_pnt, :].copy()
    logic_bad  = ~((temp>=-100.0)&(temp<=50.0))
    logic_bad[[8, 10]] = True
    logic_good = ~logic_bad
    temp[logic_bad] = np.nan
    temp_x = np.arange(temp.size)
    width = 0.6
    temp_color='gray'
    ax_temp0.bar(temp_x, temp, width=width, color=temp_color, lw=1.0, alpha=0.4, zorder=0, ec='gray')
    for i, x0 in enumerate(temp_x):
        ax_temp0.text(x0, 0.0, temperatures[x0]['name'], fontsize=8, color=temp_color, ha='center', va='bottom')
        if logic_good[x0]:
            y0 = _DATA_PLT_['temperature'][index_pnt, x0]
            ax_temp0.text(x0, y0, '%.1f%s' % (y0, temperatures[x0]['units']), fontsize=8, color='black', ha='center', va='center')
        else:
            if temperatures[x0]['name'] not in ['N/A']:
                y0 = _DATA_PLT_['temperature'][index_pnt, x0]
                ax_temp0.text(x0, -10.0, '%.1f%s' % (y0, temperatures[x0]['units']), fontsize=8, color='black', ha='center', va='center')

    ax_temp0.axhline(0.0, color=temp_color, lw=1.0, ls='-')
    ax_temp0.set_xlim(temp_x[0]-width/2.0, temp_x[-1]+width/2.0)
    ax_temp0.set_ylim((-100, 50))

    ax_temp0.tick_params(top=False, labeltop=False, left=False, labelleft=False, right=False, labelright=False, bottom=False, labelbottom=False)
    ax_temp0.axis('off')
    ax_temp0_.tick_params(top=False, labeltop=False, left=False, labelleft=False, right=False, labelright=False, bottom=False, labelbottom=False)
    ax_temp0_.axis('off')
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # time series
    #╭────────────────────────────────────────────────────────────────────────────╮#
    logic_solid = (_DATA_PLT_['tmhr']>=tmhr_past) & (_DATA_PLT_['tmhr']<=tmhr_current)

    if logic_solid.sum() > 0:

        for key in axes_spec.keys():

            vname = '%s|raw' % key
            vname0 = '%s|dc' % key

            var_plot = vars_plot[vname]
            var_plot0 = vars_plot[vname0]

            if var_plot['plot?']:

                tms_y = _DATA_PLT_[var_plot['vname']][:, Nchan[key]]
                tms_y0 = _DATA_PLT_[var_plot['vname']][:, Nchan[key]] - _DATA_PLT_[var_plot0['vname']][:, Nchan[key]]

                ax_tms.scatter(_DATA_PLT_['tmhr'][logic_solid], tms_y[logic_solid], c=vars_plot[vname]['color'], s=5, lw=0.0, zorder=var_plot['zorder'], alpha=0.8)
                ax_tms.plot(_DATA_PLT_['tmhr'][logic_solid], tms_y0[logic_solid], lw=0.5, color=var_plot0['color'], zorder=10, alpha=1.0)

        ax_tms.vlines(_DATA_PLT_['tmhr'][logic_solid][_DATA_PLT_['shutter'][logic_solid]==1], ymin=count_base, ymax=count_ceil, color='black', alpha=0.3, lw=1.5, zorder=0)
        ax_tms.vlines(_DATA_PLT_['tmhr'][logic_solid][_DATA_PLT_['shutter_dc'][logic_solid]==10], ymin=count_base, ymax=count_ceil, color='red', alpha=0.3, lw=1.5, zorder=0)

    ax_tms.axhline(count_base, color='red', alpha=0.2, zorder=0)
    ax_tms.axhline(count_ceil, color='red', alpha=0.2, zorder=0)

    # ax_tms.grid()
    ax_tms.set_xlim((tmhr_past-0.0000001, tmhr_current+0.0000001))
    xticks = np.linspace(tmhr_past, tmhr_current, 7)
    ax_tms.xaxis.set_major_locator(FixedLocator(xticks))
    ax_tms.xaxis.set_minor_locator(FixedLocator(np.arange(tmhr_past, tmhr_current+0.001, 1.0/60.0)))
    xtick_labels = ['' for i in range(xticks.size)]
    xtick_labels[0]  = '%.4f' % tmhr_past
    xtick_labels[-1] = '%.4f' % tmhr_current
    index_center = int(xticks.size//2)
    xtick_labels[index_center] = '%.4f' % xticks[index_center]
    ax_tms.set_xticklabels(xtick_labels)
    ax_tms.set_xlabel('Time [hour]')

    text_left = ' ← %d minutes ago' % (tmhr_length*60.0)
    ax_tms.annotate(text_left, xy=(0.03, -0.15), fontsize=10, color='gray', xycoords='axes fraction', ha='left', va='center')
    text_right = 'Current → '
    ax_tms.annotate(text_right, xy=(0.97, -0.15), fontsize=10, color='gray', xycoords='axes fraction', ha='right', va='center')

    ax_tms.set_ylim((count_base-5000, count_ceil+5000))
    ax_tms.set_ylabel('Digital Counts')
    ax_tms.ticklabel_format(axis='y', style='sci', scilimits=(0, 4), useMathText=True)
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # figure settings
    #╭────────────────────────────────────────────────────────────────────────────╮#
    title_fig = '%s UTC (%s)\nIndex: %d' % (dtime_current.strftime('%Y-%m-%d %H:%M:%S'), _DATA_PLT_['which_ssfr'].upper(), index_pnt)
    fig.suptitle(title_fig, y=0.99, fontsize=20)
    #╰────────────────────────────────────────────────────────────────────────────╯#


    ax.axis('off')

    if test:
        plt.show()
        sys.exit()
    else:
        plt.savefig('%s/%5.5d.jpg' % (_DATA_PLT_['fdir_tmp'], index_pnt), bbox_inches='tight', dpi=150, pil_kwargs={'quality':95})
        plt.close(fig)

def main_pre(
        ssfr0,
        time_step=_TIME_STEP_,
        wvl_step=_WVL_STEP_,
        which_ssfr=_DEFAULT_SSFR_,
        ):

    msg = '\nMessage [sks2mp4]: Processing data from <%s> (default flux radiometer is set to <%s>) ...' % (which_ssfr.upper(), _DEFAULT_SSFR_.upper())
    print(msg)

    # retrieve date from ssfr data object
    #╭────────────────────────────────────────────────────────────────────────────╮#
    jday = ssfr0.data_raw['jday'][::time_step]
    jday_unique, counts = np.unique(np.int_(jday[jday>0]), return_counts=True)
    jday0 = jday_unique[np.argmax(counts)]
    date = ssfr.util.jday_to_dtime(jday0)

    date_s = date.strftime('%Y%m%d')
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # retrieve other data
    #╭────────────────────────────────────────────────────────────────────────────╮#
    tmhr = (jday-jday0)*24.0

    zen_si_wvl = ssfr0.data_raw['wvl_zen_si'][::wvl_step]
    zen_in_wvl = ssfr0.data_raw['wvl_zen_in'][::wvl_step]
    nad_si_wvl = ssfr0.data_raw['wvl_nad_si'][::wvl_step]
    nad_in_wvl = ssfr0.data_raw['wvl_nad_in'][::wvl_step]

    zen_si_cnt_raw = ssfr0.data_raw['count_raw'][::time_step, ::wvl_step, 0]
    zen_in_cnt_raw = ssfr0.data_raw['count_raw'][::time_step, ::wvl_step, 1]
    nad_si_cnt_raw = ssfr0.data_raw['count_raw'][::time_step, ::wvl_step, 2]
    nad_in_cnt_raw = ssfr0.data_raw['count_raw'][::time_step, ::wvl_step, 3]

    zen_si_cnt_dc = ssfr0.data_raw['count_dark-corr'][::time_step, ::wvl_step, 0]
    zen_in_cnt_dc = ssfr0.data_raw['count_dark-corr'][::time_step, ::wvl_step, 1]
    nad_si_cnt_dc = ssfr0.data_raw['count_dark-corr'][::time_step, ::wvl_step, 2]
    nad_in_cnt_dc = ssfr0.data_raw['count_dark-corr'][::time_step, ::wvl_step, 3]

    int_time = ssfr0.data_raw['int_time'][::time_step, :]
    shutter = ssfr0.data_raw['shutter'][::time_step]
    shutter_dc = ssfr0.data_raw['shutter_dark-corr'][::time_step]
    temperature = ssfr0.data_raw['temp'][::time_step, :]
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # recreate a dictionary to contain ssfr data
    #╭────────────────────────────────────────────────────────────────────────────╮#
    data_plt = {}

    data_plt['which_ssfr'] = which_ssfr.lower()
    data_plt['date_s'] = date_s
    data_plt['jday'] = jday
    data_plt['tmhr'] = tmhr

    data_plt['zen_si_cnt_raw'] = zen_si_cnt_raw
    data_plt['zen_in_cnt_raw'] = zen_in_cnt_raw
    data_plt['nad_si_cnt_raw'] = nad_si_cnt_raw
    data_plt['nad_in_cnt_raw'] = nad_in_cnt_raw

    data_plt['zen_si_cnt_dc']  = zen_si_cnt_dc
    data_plt['zen_in_cnt_dc']  = zen_in_cnt_dc
    data_plt['nad_si_cnt_dc']  = nad_si_cnt_dc
    data_plt['nad_in_cnt_dc']  = nad_in_cnt_dc

    data_plt['zen_si_wvl'] = zen_si_wvl
    data_plt['zen_in_wvl'] = zen_in_wvl
    data_plt['nad_si_wvl'] = nad_si_wvl
    data_plt['nad_in_wvl'] = nad_in_wvl

    data_plt['int_time'] = int_time
    data_plt['shutter']  = shutter
    data_plt['shutter_dc']  = shutter_dc
    data_plt['temperature'] = temperature
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # retrieve radiance/irradiance if radiometric calibration is available
    # if not, apply scaling
    #╭────────────────────────────────────────────────────────────────────────────╮#
    wvl_zen  = ssfr0.data_spec['wvl_zen']
    wvl_nad  = ssfr0.data_spec['wvl_nad']

    data_zen = ssfr0.data_spec['cnt_zen']
    data_nad = ssfr0.data_spec['cnt_nad']

    data_plt['is_flux'] = False
    for idset in np.unique(ssfr0.data_raw['dset_num']):

        logic_dset = (ssfr0.data_raw['dset_num'] == idset)

        # zenith
        #╭──────────────────────────────────────────────────────────────╮#
        int_time_tag_zen = 'si-%3.3d|in-%3.3d' % (ssfr0.data_raw['int_time'][ssfr0.data_raw['dset_num']==idset][0, 0], ssfr0.data_raw['int_time'][ssfr0.data_raw['dset_num']==idset][0, 1])
        fnames_cal_zen = sorted(ssfr.util.get_all_files(_FDIR_CAL_, pattern='*%s*|*%s*|*%s*zen*%s*' % (_LAMP_PRI_, _LAMP_SEC_, which_ssfr.lower(), int_time_tag_zen)), key=os.path.getmtime)

        if len(fnames_cal_zen) > 0:
            # find most recent available calibration
            #╭────────────────────────────────────────────────╮#
            jday_cal_zen = np.zeros(len(fnames_cal_zen), dtype=np.float64)
            for i in range(jday_cal_zen.size):
                dtime0_s = os.path.basename(fnames_cal_zen[i]).split('|')[2].split('_')[0]
                dtime0 = datetime.datetime.strptime(dtime0_s, '%Y-%m-%d')
                jday_cal_zen[i] = ssfr.util.dtime_to_jday(dtime0) + i/86400.0
            fname_cal_zen = fnames_cal_zen[np.argmin(np.abs(jday_cal_zen-jday0))]
            #╰────────────────────────────────────────────────╯#

            # apply radiometric calibration
            #╭────────────────────────────────────────────────╮#
            data_cal_zen = ssfr.util.load_h5(fname_cal_zen)
            # if (which_ssfr.lower() == _DEFAULT_SSFR_):
            #     data_cal_zen = ssfr.util.load_h5(fname_cal_zen)
            # else:
            #     data_cal_zen = None
            #╰────────────────────────────────────────────────╯#
        else:
            data_cal_zen = None
        #╰──────────────────────────────────────────────────────────────╯#

        # processing zenith
        #╭──────────────────────────────────────────────────────────────╮#
        if data_cal_zen is not None:
            # convert counts to flux
            #╭────────────────────────────────────────────────╮#
            msg = '\nMessage [sks2mp4]: Using <%s> for %s zenith %s ...' % (os.path.basename(fname_cal_zen), which_ssfr.upper(), int_time_tag_zen)
            print(msg)
            for i in range(wvl_zen.size):
                data_zen[logic_dset, i] = data_zen[logic_dset, i] / data_cal_zen['sec_resp'][i]
            data_zen[ssfr0.data_spec['sat_zen']==1] = -0.05

            data_plt['is_flux'] = True
            #╰────────────────────────────────────────────────╯#
        else:
            # apply scaling only
            #╭────────────────────────────────────────────────╮#
            msg = '\nMessage [sks2mp4]: Applying scaling [%.1f, %.1f] for %s zenith %s ...' % (*_FLUX_RANGE_, which_ssfr.upper(), int_time_tag_zen)
            print(msg)
            scaler0 = (_FLUX_RANGE_[-1]-_FLUX_RANGE_[0])
            data_zen[logic_dset, :] = data_zen[logic_dset, :]/(np.nanmax(data_zen[logic_dset, :])-np.nanmin(data_zen[logic_dset, :]))*scaler0
            #╰────────────────────────────────────────────────╯#
        #╰──────────────────────────────────────────────────────────────╯#

        # nadir
        #╭──────────────────────────────────────────────────────────────╮#
        int_time_tag_nad = 'si-%3.3d|in-%3.3d' % (ssfr0.data_raw['int_time'][ssfr0.data_raw['dset_num']==idset][0, 2], ssfr0.data_raw['int_time'][ssfr0.data_raw['dset_num']==idset][0, 3])
        fnames_cal_nad = sorted(ssfr.util.get_all_files(_FDIR_CAL_, pattern='*%s*|*%s*|*%s*nad*%s*' % (_LAMP_PRI_, _LAMP_SEC_, which_ssfr.lower(), int_time_tag_nad)), key=os.path.getmtime)

        if len(fnames_cal_nad) > 0:
            # find most recent available calibration
            #╭────────────────────────────────────────────────╮#
            jday_cal_nad = np.zeros(len(fnames_cal_nad), dtype=np.float64)
            for i in range(jday_cal_nad.size):
                dtime0_s = os.path.basename(fnames_cal_nad[i]).split('|')[2].split('_')[0]
                dtime0 = datetime.datetime.strptime(dtime0_s, '%Y-%m-%d')
                jday_cal_nad[i] = ssfr.util.dtime_to_jday(dtime0) + i/86400.0
            fname_cal_nad = fnames_cal_nad[np.argmin(np.abs(jday_cal_nad-jday0))]
            #╰────────────────────────────────────────────────╯#

            # apply radiometric calibration
            #╭────────────────────────────────────────────────╮#
            data_cal_nad = ssfr.util.load_h5(fname_cal_nad)
            # if (which_ssfr.lower() == _DEFAULT_SSFR_):
            #     data_cal_nad = ssfr.util.load_h5(fname_cal_nad)
            # else:
            #     data_cal_nad = None
            #╰────────────────────────────────────────────────╯#
        else:
            data_cal_nad = None
        #╰──────────────────────────────────────────────────────────────╯#

        # processing nadir
        #╭──────────────────────────────────────────────────────────────╮#
        if data_cal_nad is not None:
            # convert counts to flux
            #╭────────────────────────────────────────────────╮#
            msg = '\nMessage [sks2mp4]: Using <%s> for %s nadir %s ...' % (os.path.basename(fname_cal_nad), which_ssfr.upper(), int_time_tag_nad)
            print(msg)
            for i in range(wvl_nad.size):
                data_nad[logic_dset, i] = data_nad[logic_dset, i] / data_cal_nad['sec_resp'][i]
            data_nad[ssfr0.data_spec['sat_nad']==1] = -0.05

            data_plt['is_flux'] = True
            #╰────────────────────────────────────────────────╯#
        else:
            # apply scaling only
            #╭────────────────────────────────────────────────╮#
            msg = '\nMessage [sks2mp4]: Applying scaling [%.1f, %.1f] for %s nadir %s ...' % (*_FLUX_RANGE_, which_ssfr.upper(), int_time_tag_nad)
            print(msg)
            scaler0 = (_FLUX_RANGE_[-1]-_FLUX_RANGE_[0])
            data_nad[logic_dset, :] = data_nad[logic_dset, :]/(np.nanmax(data_nad[logic_dset, :])-np.nanmin(data_nad[logic_dset, :]))*scaler0
            #╰────────────────────────────────────────────────╯#
        #╰──────────────────────────────────────────────────────────────╯#

    data_plt['zen_wvl']  = wvl_zen[::wvl_step]
    data_plt['nad_wvl']  = wvl_nad[::wvl_step]
    data_plt['zen_spec'] = data_zen[::time_step, ::wvl_step].astype(np.float16)
    data_plt['nad_spec'] = data_nad[::time_step, ::wvl_step].astype(np.float16)
    #╰────────────────────────────────────────────────────────────────────────────╯#

    # reduce memory size
    #╭────────────────────────────────────────────────────────────────────────────╮#
    for key in data_plt.keys():
        if key not in ['jday', 'date_s', 'which_ssfr', 'is_flux']:
            if data_plt[key].dtype in ['float64']:
                data_plt[key] = data_plt[key].astype(np.float32)
            elif data_plt[key].dtype in ['int64','int32', 'int16']:
                data_plt[key] = data_plt[key].astype(np.int8)
    #╰────────────────────────────────────────────────────────────────────────────╯#

    return data_plt

def main_vid(
        fnames,
        fdir_tmp=_FDIR_TMP_,
        Ncpu=_NCPU_,
        which_ssfr=_DEFAULT_SSFR_,
        time_interval=_TIME_INTERVAL_,
        fdir_out=_FDIR_OUT_,
        ):

    # read in ssfr data
    #╭────────────────────────────────────────────────────────────────────────────╮#
    ssfr0 = ssfr.lasp_ssfr.read_ssfr(fnames, dark_corr_mode='interp', which_ssfr='lasp|%s' % which_ssfr.lower())
    #╰────────────────────────────────────────────────────────────────────────────╯#

    # pre-process data
    #╭────────────────────────────────────────────────────────────────────────────╮#
    _DATA_PLT_ = main_pre(ssfr0, which_ssfr=which_ssfr)
    #╰────────────────────────────────────────────────────────────────────────────╯#

    # create temporary directory to store images
    #╭────────────────────────────────────────────────────────────────────────────╮#
    job_tag = '%s_%s_quicklook-by-sks2mp4' % (_DATA_PLT_['date_s'], which_ssfr.upper())
    fdir_tmp = os.path.join(fdir_tmp, job_tag)
    if os.path.exists(fdir_tmp):
        os.system('rm -rf %s' % fdir_tmp)
    os.makedirs(fdir_tmp)
    _DATA_PLT_['fdir_tmp'] = fdir_tmp
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # prepare statements for parallel processing
    #╭────────────────────────────────────────────────────────────────────────────╮#
    Ndata = _DATA_PLT_['jday'].size // time_interval
    indices = np.arange(Ndata)*time_interval
    #╰────────────────────────────────────────────────────────────────────────────╯#

    # create images
    #╭────────────────────────────────────────────────────────────────────────────╮#
    with SharedMemoryManager() as smm:

        shared_data = {}
        unshared_data = {}

        for key in _DATA_PLT_.keys():
            data0 = _DATA_PLT_[key]
            if isinstance(data0, np.ndarray):
                shm = smm.SharedMemory(data0.nbytes)
                shm_np_array = np.ndarray(data0.shape, dtype=data0.dtype, buffer=shm.buf)
                shm_np_array[...] = data0[...]
                shared_data[key] = {
                        'name': key,
                        'shm_name': shm.name,
                        'shape': data0.shape,
                        'dtype': data0.dtype,
                        }
            else:
                unshared_data[key] = data0

        statements = zip([shared_data]*Ndata, [unshared_data]*Ndata, indices)
        with mp.Pool(processes=Ncpu) as pool:
            r = list(tqdm(pool.imap(plot_video_frame, statements), total=Ndata))
    #╰────────────────────────────────────────────────────────────────────────────╯#


    # make video
    #╭────────────────────────────────────────────────────────────────────────────╮#
    fname_mp4 = '%s.mp4' % (job_tag)
    os.system('ffmpeg -y -framerate 10 -pattern_type glob -i "%s/*.jpg" -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -c:v libx264 -crf 10 -pix_fmt yuvj420p %s' % (fdir_tmp, fname_mp4))
    if _DELETE_TMP_:
        if _DELETE_ASK_:
            print('\nMessage [sks2mp4]: Press <y/n> to delete/keep temporary files (total of %s):' % (subprocess.check_output('du -hs %s' % fdir_tmp, shell=True, text=True).split('\t')[0]))
            os.system('rm -rf -I %s' % fdir_tmp)
        else:
            os.system('rm -rf %s' % fdir_tmp)
    #╰────────────────────────────────────────────────────────────────────────────╯#


if __name__ == '__main__':

    fdir_inp = sys.argv[1]
    if len(sys.argv) == 2:
        fdir_out = _FDIR_OUT_
    elif len(sys.argv) == 3:
        fdir_out = sys.argv[2]

    fdir_inp = os.path.abspath(fdir_inp)
    fdir_out = os.path.abspath(fdir_out)

    if os.path.exists(fdir_inp):
        fnames = ssfr.util.get_all_files(fdir_inp, pattern='*.%s' % _FILE_EXTENSION_)

        if len(fnames) > 0:

            if (not os.path.exists(fdir_out)):
                os.makedirs(fdir_out)

            if 'ssfr-a' in fdir_inp.lower():
                which_ssfr = 'ssfr-a'
            elif 'ssfr-b' in fdir_inp.lower():
                which_ssfr = 'ssfr-b'
            else:
                which_ssfr = _DEFAULT_SSFR_

            main_vid(fnames, fdir_out=fdir_out, which_ssfr=which_ssfr)

        else:
            msg = '\nError [sks2mp4]: <%s> does not contain any SKS files.'
            raise OSError(msg)

    else:
        msg = '\nError [sks2mp4]: <%s> does not exist.'
        raise OSError(msg)
